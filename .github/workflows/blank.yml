# This is a basic workflow to help you get started with Actions
name: Build and Push WordPress Docker Image

on: 
  push:
    branches:
      - main 
  
jobs: 
  build-and-push: 
    runs-on: arc-runner-set-ampere14
 

    steps:
      - name: Check out the code
        uses: actions/checkout@v3 

      - name: Sleep for 60 seconds
        run: sleep 90
      
      # - name: Start Docker daemon
      #   run: |
      #     sudo dockerd > /dev/null 2>&1 &
      #     sleep 10  # Wait for Docker to start 
        
      - name: Check Docker status
        run: docker info

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/wordpress:latest

      - name: Log out from Docker Hub
        run: docker logout
# name: CICD

# # Controls when the workflow will run  
# on:
#   push:  
#     branches: [ "main" ]       
#   pull_request: 
#     branches: [ "main" ]    
#   workflow_dispatch: 

# jobs:
#   LLVM_build:
#     strategy:
#       matrix:
#         arch: [arm64, x86]
#     runs-on: ${{ matrix.arch == 'x86' && 'arc-runner-set-genoa' || 'arc-runner-set-banshee8' }}
#     # runs-on: ${{ matrix.arch == 'x86' && 'arc-runner-set-x86' || 'arc-runner-set-ampere' }}

#     steps:
#       - name: Log Operating System Details
#         run: |
#           echo "Architecture: ${{ matrix.arch }}"
#           uname -a
#           lsb_release -a || cat /etc/os-release
#           lscpu
      
#       - name: Checkout LLVM source code
#         uses: actions/checkout@v4
#         with:
#           repository: llvm/llvm-project
#           path: llvm-project

#       - name: Set up build environment
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y build-essential cmake ninja-build python3

#       - name: Configure LLVM build
#         run: |
#           mkdir -p llvm-project/build
#           cd llvm-project/build
#           cmake -G Ninja \
#             -DLLVM_ENABLE_PROJECTS="clang" \
#              -DLLVM_ENABLE_RUNTIMES="libunwind;libcxx;libcxxabi" \
#             -DLLVM_TARGETS_TO_BUILD="AArch64;X86" \
#             -DCMAKE_BUILD_TYPE=Release \
#             -DLLVM_ENABLE_ASSERTIONS=ON \
#             ../llvm

#       - name: Build LLVM
#         run: |
#           cd llvm-project/build
#           ninja
#         env:
#           LLVM_PARALLEL_COMPILE_JOBS: ${{ matrix.arch == 'x86' && 8 || 8 }}

#       - name: Display build information
#         run: |
#           echo "Architecture: ${{ matrix.arch }}"
#           echo "Build completed on $(date)"


#   deploy:
#     needs: LLVM_build
#     strategy:
#       matrix:
#         arch: [arm64]
#     runs-on: arm64-github-runner
#     # runs-on: arc-runner-set-ampere

#     steps:

#       - name: List root directory contents
#         run: |
#           ls -la
#           lscpu
    
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: List repository contents
#         run: |
#           ls -la $GITHUB_WORKSPACE
#           pwd
#       - name: Set up Docker daemon
#         run: |
#           docker info
# ============          
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Verify Docker Login
      #   run: docker info

      # - name: Build and push Docker image
      #   run: |
      #     docker buildx create --use
      #     docker buildx inspect --bootstrap
      #     docker buildx build --platform linux/${{ matrix.arch }} --tag ${{ secrets.DOCKER_USERNAME }}/ampere-solution-cicd-project:${{ matrix.arch }}-latest --push 
          

      # - name: Install Argo CD CLI
      #   run: |
      #     curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
      #     chmod +x argocd
      #     sudo mv argocd /usr/local/bin/
      
      # - name: Debug Environment Variables
      #   run: |
      #     echo "ARGOCD_SERVER: $ARGOCD_SERVER"
      #     echo "ARGOCD_USERNAME: $ARGOCD_USERNAME"
      #     echo "ARGOCD_PASSWORD: $ARGOCD_PASSWORD"
      
      # - name: Check DNS Resolution with nslookup
      #   continue-on-error: true  # Continue even if this step fails
      #   run: |
      #     nslookup $ARGOCD_SERVER
      
      # - name: Check DNS Resolution with dig
      #   continue-on-error: true  # Continue even if this step fails
      #   run: |
      #     dig $ARGOCD_SERVER
      
      # - name: Check DNS Resolution with host
      #   continue-on-error: true  # Continue even if this step fails
      #   run: |
      #     host $ARGOCD_SERVER
      
      # - name: Check Network Connectivity
      #   continue-on-error: true  # Continue even if this step fails
      #   run: |
      #     ping -c 4 $ARGOCD_SERVER
      
      # - name: Verify Argo CD CLI Installation
      #   run: |
      #     which argocd
      #     argocd version
      
      # - name: Login Argo CD 
      #   env:
      #     ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
      #     ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
      #     ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
      #   run: |
      #     # Debug the argocd login command
      #     echo "argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure"
      #     # Login to Argo CD and sync the application
      #     argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
      
      # - name: Sync Argo CD Application
      #   env:
      #     ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
      #     ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
      #     ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
      #   run: |
      #     argocd app sync nginx-app

