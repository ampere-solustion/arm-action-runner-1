# This is a basic workflow to help you get started with Actions

name: CICD

# Controls when the workflow will run  
on:
  push:  
    branches: [ "main" ]       
  pull_request: 
    branches: [ "main" ]    
  workflow_dispatch:

jobs:
  LLVM_build:
    strategy:
      matrix:
        arch: [arm64, x86]
    runs-on: ${{ matrix.arch == 'x86' && 'arc-runner-set-x86' || 'arc-runner-set-ampere' }}

    steps:
      - name: Log Operating System Details
        run: |
          echo "Architecture: ${{ matrix.arch }}"
          uname -a
          lsb_release -a || cat /etc/os-release
          lscpu

      - name: Checkout LLVM source code
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          path: llvm-project

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build python3

      - name: Configure LLVM build
        run: |
          mkdir -p llvm-project/build
          cd llvm-project/build
          cmake -G Ninja \
            -DLLVM_ENABLE_PROJECTS="clang" \
             -DLLVM_ENABLE_RUNTIMES="libunwind;libcxx;libcxxabi" \
            -DLLVM_TARGETS_TO_BUILD="AArch64;X86" \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            ../llvm

      - name: Build LLVM
        run: |
          cd llvm-project/build
          ninja
        env:
          LLVM_PARALLEL_COMPILE_JOBS: ${{ matrix.arch == 'x86' && 8 || 8 }}

      - name: Display build information
        run: |
          echo "Architecture: ${{ matrix.arch }}"
          echo "Build completed on $(date)"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: llvm-build-${{ matrix.arch }}
          path: llvm-project/build

  deploy:
    needs: LLVM_build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm64, x86]

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: llvm-build-${{ matrix.arch }}
          path: llvm-build-${{ matrix.arch }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Verify Docker Login
        run: docker info

      - name: List root directory contents
        run: |
          ls -la

      - name: List build directory contents
        run: |
          ls -la llvm-build-${{ matrix.arch }}
          
      - name: Copy Dockerfile to build directory
        run: |
          cp Dockerfile llvm-build-${{ matrix.arch }}
          
      - name: List build directory contents
        run: |
          ls -la llvm-build-${{ matrix.arch }}  
          cat llvm-build-${{ matrix.arch }}/Dockerfile

      - name: Copy build artifacts to root
        run: |
          cp -r llvm-build-${{ matrix.arch }}/* .   
          
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/llvm-project:${{ matrix.arch }}-latest llvm-build-${{ matrix.arch }}
          docker push ${{ secrets.DOCKER_USERNAME }}/llvm-project:${{ matrix.arch }}-latest

      - name: Set up Kubernetes
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Argo CD Login
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

      - name: Sync Argo CD Application
        run: |
          argocd app sync your-app-name
          argocd app wait your-app-name --health
